// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

generator dbml {
  provider              = "prisma-dbml-generator"
  output                = "."
  projectName           = "Econominhas"
  projectDatabaseType   = "PostgreSQL"
  projectNote           = "The best way to manage your finances"
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// **********************************
//
// Accounts
//
// **********************************

enum SignInProviderEnum {
  GOOGLE

  @@map("sign_in_provider_enum")
}

/// Contains user's sign in information
model Account {
  id        String   @id @db.Char(16)
  email     String?  @db.VarChar(150)
  phone     String?  @db.VarChar(25)
  createdAt DateTime @default(now()) @map("created_at")

  config                    Config?
  salary                    Salary?
  onboarding                Onboarding?
  magicLinkCode             MagicLinkCode?
  signInProviders           SignInProvider[]
  refreshTokens             RefreshToken[]
  userSubscriptions         UserSubscription[]
  termsAndPoliciesAccepteds TermsAndPoliciesAccepted[]
  bankAccounts              BankAccount[]
  cards                     Card[]
  categories                Category[]
  budgets                   Budget[]
  transactions              Transaction[]
  recurrentTransactions     RecurrentTransaction[]

  @@unique([email])
  @@unique([phone])
  @@map("accounts")
}

/// Contains user's link to sign in providers, like google, discord, etc
model SignInProvider {
  accountId    String             @map("account_id") @db.Char(16)
  provider     SignInProviderEnum
  providerId   String             @map("provider_id") @db.VarChar(50)
  accessToken  String             @map("access_token") @db.VarChar(250)
  refreshToken String             @map("refresh_token") @db.VarChar(250)
  expiresAt    DateTime           @map("expires_at")

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@id([accountId, provider, providerId])
  @@map("sign_in_providers")
}

/// Contains user's account config
model Config {
  id              String  @id @db.Char(16) /// Same as accountId
  accountId       String  @map("account_id") @db.Char(16)
  name            String? @db.VarChar(20)
  currentBudgetId String? @map("current_budget_id") @db.Char(16)

  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  currentBudget Budget? @relation(fields: [currentBudgetId], references: [id])

  @@unique([accountId])
  @@unique([currentBudgetId])
  @@map("configs")
}

/// Contains data about the user's onboarding and the steps concluded
model Onboarding {
  id           String    @id @db.Char(16) /// Same as accountId
  accountId    String    @map("account_id") @db.Char(16)
  name         DateTime? @db.Timestamp
  categories   DateTime? @db.Timestamp
  bankAccounts DateTime? @map("bank_accounts") @db.Timestamp
  creditCards  DateTime? @map("credit_cards") @db.Timestamp
  budget       DateTime? @db.Timestamp
  salary       DateTime? @db.Timestamp

  account Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId])
  @@map("onboardings")
}

/// Contains codes to be used by the users to login
model MagicLinkCode {
  accountId     String   @id @map("account_id") @db.Char(16)
  code          String   @db.Char(32)
  isFirstAccess Boolean  @map("is_first_access")
  createdAt     DateTime @default(now()) @map("created_at")

  account Account? @relation(fields: [accountId], references: [id], map: "MagicLinkCode_id_fkey", onDelete: Cascade)

  @@map("magic_link_codes")
}

/// Contains codes to be used to refresh the access token
model RefreshToken {
  accountId    String   @map("account_id") @db.Char(16)
  refreshToken String   @map("refresh_token") @db.Char(64)
  createdAt    DateTime @default(now()) @map("created_at")

  account Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@id([accountId, refreshToken])
  @@unique([refreshToken])
  @@map("refresh_tokens")
}

// **********************************
//
// Salary
//
// **********************************

enum EmploymentContractTypeEnum {
  CLT
  PJ

  @@map("employment_contract_type_enum")
}

enum SalaryTypeEnum {
  MONEY
  BENEFIT_VA
  BENEFIT_VT

  @@map("salary_type_enum")
}

model Salary {
  id                     String                     @id @db.Char(16) /// Same as accountId
  accountId              String                     @map("account_id") @db.Char(16)
  employmentContractType EmploymentContractTypeEnum @map("employment_contract_type")
  startAt                DateTime?                  @map("start_at")

  account                     Account                      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  salaryRecurrentTransactions SalaryRecurrentTransaction[]

  @@unique([accountId])
  @@map("salaries")
}

model SalaryRecurrentTransaction {
  id                     String         @id @db.Char(16)
  salaryId               String         @map("salary_id") @db.Char(16)
  recurrentTransactionId String         @map("recurrent_transaction_id") @db.Char(16)
  type                   SalaryTypeEnum

  salary               Salary               @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  recurrentTransaction RecurrentTransaction @relation(fields: [recurrentTransactionId], references: [id], onDelete: Cascade)

  @@unique([salaryId, type])
  @@map("salary_recurrent_transactions")
}

// **********************************
//
// Subscriptions
//
// **********************************

/// Contains information about the subscriptions
model Subscription {
  id                    String  @id @db.Char(16)
  name                  String  @db.VarChar(30)
  icon                  String  @db.VarChar(50)
  color                 String  @db.Char(7)
  iconColor             String  @map("icon_color") @db.Char(7)
  monthlyPrice          Int     @map("monthly_price") @db.SmallInt
  yearlyPrice           Int     @map("yearly_price") @db.SmallInt
  // Number limits
  bankAccounts          Int     @map("bank_accounts") @db.SmallInt /// -1 = Infinite
  postpaidCard          Int     @map("postpaid_card") @db.SmallInt /// -1 = Infinite
  prepaidCard           Int     @map("prepaid_card") @db.SmallInt /// -1 = Infinite
  categories            Int     @db.SmallInt /// -1 = Infinite
  transactionsPerMonth  Int     @map("transactions_per_month") @db.SmallInt /// -1 = Infinite
  recurrentTransactions Int     @map("recurrent_transactions") @db.SmallInt /// -1 = Infinite
  reports               Int     @db.SmallInt /// -1 = Infinite
  tags                  Int     @db.SmallInt /// -1 = Infinite
  reminders             Int     @db.SmallInt /// -1 = Infinite
  bankIntegrations      Int     @map("bank_integrations") @db.SmallInt /// -1 = Infinite
  budgets               Int     @db.SmallInt /// -1 = Infinite
  // Boolean limits
  web                   Boolean /// If the user has access to the web version
  ctlBpm                Boolean @map("ctl_bpm") /// Control budget per month: If allows the user to have a more precisa control over his budget, allowing him to edit each months budget, or he can only defines 1 value for all months of the year

  userSubscriptions UserSubscription[]

  @@map("subscriptions")
}

/// Contains the user's subscription
model UserSubscription {
  id             String    @id @db.Char(16)
  accountId      String    @map("account_id") @db.Char(16)
  subscriptionId String    @map("subscription_id") @db.Char(16)
  startedAt      DateTime  @default(now()) @map("started_at")
  lastRenewalAt  DateTime? @map("last_renewal_at")
  cancelledAt    DateTime? @map("cancelled_at") /// The base subscription will never have a cancelled_at, it will ALWAYS be active

  account      Account      @relation(fields: [accountId], references: [id], onDelete: Restrict)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Restrict)

  @@map("user_subscriptions")
}

// **********************************
//
// Terms of service
//
// **********************************

/// Contains the terms of use and privacy policy
model TermsAndPolicies {
  semVer        String    @id @map("sem_ver") @db.Char(5)
  termsOfUse    String    @map("terms_of_use") @db.VarChar(10000)
  privacyPolicy String    @map("privacy_policy") @db.VarChar(10000)
  liveAt        DateTime? @map("live_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  termsAndPoliciesAccepteds TermsAndPoliciesAccepted[]

  @@map("terms_and_policies")
}

/// Contains the record of all the terms accepted by the user
model TermsAndPoliciesAccepted {
  accountId  String   @map("account_id") @db.Char(16)
  semVer     String   @map("sem_ver") @db.Char(5) /// Terms and policies ID
  acceptedAt DateTime @default(now()) @map("accepted_at")

  account          Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  termsAndPolicies TermsAndPolicies @relation(fields: [semVer], references: [semVer], onDelete: Restrict)

  @@id([accountId, semVer])
  @@map("terms_and_policies_accepteds")
}

// **********************************
//
// Banks
//
// **********************************

/// Contains the record of all the existent banks
model BankProvider {
  id             String   @id @db.Char(16)
  name           String   @db.VarChar(30)
  code           String?  @db.Char(3) /// We don't have an unique constraint because some "banks" may not have codes (ex: 99pay)
  iconUrl        String   @map("icon_url") @db.VarChar(200)
  color          String   @db.Char(7)
  lastReviewedAt DateTime @default(now()) @updatedAt @map("last_reviewed_at")

  bankAccounts  BankAccount[]
  cardProviders CardProvider[]

  @@map("bank_providers")
}

/// Contains the record of all the user's banks accounts
model BankAccount {
  id             String   @id @db.Char(16)
  accountId      String   @map("account_id") @db.Char(16)
  bankProviderId String   @map("bank_provider_id") @db.Char(16)
  name           String   @db.VarChar(30)
  accountNumber  String   @map("account_number") @db.Char(6)
  branch         String   @db.Char(4)
  balance        Int
  createdAt      DateTime @default(now()) @map("created_at")

  account                   Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bankProvider              BankProvider           @relation(fields: [bankProviderId], references: [id], onDelete: Restrict)
  transactions              Transaction[]          @relation(name: "TransactionBankAccount")
  transactionFroms          Transaction[]          @relation(name: "TransactionBankAccountFrom")
  transactionTos            Transaction[]          @relation(name: "TransactionBankAccountTo")
  recurrentTransactions     RecurrentTransaction[] @relation(name: "RecurrentTransactionBankAccount")
  recurrentTransactionFroms RecurrentTransaction[] @relation(name: "RecurrentTransactionBankAccountFrom")
  recurrentTransactionTos   RecurrentTransaction[] @relation(name: "RecurrentTransactionBankAccountTo")
  cards                     Card[]

  @@unique([accountId, bankProviderId, accountNumber])
  @@map("bank_accounts")
}

// **********************************
//
// Cards
//
// **********************************

enum CardTypeEnum {
  CREDIT
  BENEFIT

  @@map("card_type_enum")
}

enum PayAtEnum {
  STATEMENT
  DUE

  @@map("pay_at_enum")
}

enum CardNetworkEnum {
  // Credit
  VISA
  MASTERCARD
  ELO
  SODEXO
  AMEX
  // VA
  ALELO
  PLUXEE
  TICKET
  VR

  @@map("card_network_enum")
}

enum CardVariantEnum {
  // Credit
  ENTRY_LEVEL // Mastercard=Standard Visa=Classic
  MID_MARKET // Mastercard=Gold Visa=Gold Elo=Mais
  PREMIUM // Mastercard=Platinum Visa=Platinum Elo=Grafite
  SUPER_PREMIUM // Visa=Signature
  ULTRA_PREMIUM // Mastercard=Black Visa=Infinite Elo=Nanquim
  // Benefit
  VA
  VT

  @@map("card_variant_enum")
}

/// Contains the record of all the existent cards
model CardProvider {
  id             String          @id @db.Char(16)
  bankProviderId String?         @map("bank_provider_id") @db.Char(16)
  name           String          @db.VarChar(30)
  iconUrl        String          @map("icon_url") @db.VarChar(200)
  color          String          @db.Char(7)
  type           CardTypeEnum
  network        CardNetworkEnum
  variant        CardVariantEnum
  lastReviewedAt DateTime        @default(now()) @updatedAt @map("last_reviewed_at")
  statementDays  Int             @map("statement_days") @db.SmallInt /// Only postpaid cards have this column

  bankProvider BankProvider? @relation(fields: [bankProviderId], references: [id], onDelete: Restrict)
  cards        Card[]

  @@map("card_providers")
}

/// Contains the record of all the user's cards
model Card {
  id             String     @id @db.Char(16)
  accountId      String     @map("account_id") @db.Char(16)
  cardProviderId String     @map("card_provider_id") @db.Char(16)
  name           String     @db.VarChar(30)
  lastFourDigits String     @map("last_four_digits") @db.Char(4)
  // Postpaid cards
  dueDay         Int?       @map("due_day") @db.SmallInt /// Only postpaid cards have this column
  limit          Int? /// Only postpaid cards have this column
  payAt          PayAtEnum? @map("pay_at")
  payWithId      String?    @map("pay_with_id") /// Bank account ID to pay card bill
  // Prepaid cards
  balance        Int? /// Only prepaid cards have this column

  account               Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bills                 CardBill[]
  cardProvider          CardProvider           @relation(fields: [cardProviderId], references: [id], onDelete: Restrict)
  transactions          Transaction[]
  recurrentTransactions RecurrentTransaction[]
  // Postpaid cards
  payWith               BankAccount?           @relation(fields: [payWithId], references: [id], onDelete: Restrict)

  @@unique([cardProviderId, lastFourDigits])
  @@map("cards")
}

/// Contains the record of all card's bills, we save this to have a history of the bills dates, since the user can change the dueDay of the card, and if we define it dynamically, it will be inconsistent
model CardBill {
  id                   String    @id @db.Char(16)
  cardId               String    @map("card_id") @db.Char(16)
  month                DateTime  @db.Date /// The first day of the month relative to the card's dueDay
  startAt              DateTime  @map("start_at") @db.Date /// The day that the transactions start to count as part of this bill
  endAt                DateTime  @map("end_at") @db.Date /// The day that the transactions stop to count as part of this bill. The day BEFORE the statement date
  statementDate        DateTime  @map("statement_date") @db.Date /// The next day of the endDate, were all expenses are added together and the bill value is defined
  dueDate              DateTime  @map("due_date") @db.Date /// The final day to pay this bill, also use to determine from which month this bill belongs to
  paidAt               DateTime? @map("paid_at") @db.Timestamp
  paymentTransactionId String?   @map("payment_transaction_id")

  card               Card          @relation(fields: [cardId], references: [id], onDelete: Restrict)
  paymentTransaction Transaction?  @relation(fields: [paymentTransactionId], references: [id], onDelete: Restrict)
  installments       Installment[]

  @@unique([paymentTransactionId])
  @@unique([cardId, month])
  @@map("card_bills")
}

// **********************************
//
// Categories
//
// **********************************

enum IconEnum {
  house
  shopping_cart @map("shopping-cart")
  baby
  tv
  medkit
  kiss
  suitcase
  beach
  question
  upload
  download
  transfer
  ad
  crown
  pencil
  logout
  trashcan
  pluscircle
  google
  email
  phone
  invoice
  plus
  wallet
  gear
  arrow_left    @map("arrow-left")
  less_than     @map("less-than")
  more_than     @map("more-than")
  triangle_down @map("triangle-down")
  info
  bank
  card
  ticket
  category
  pdf
  tag
  bell
  connect
  profile
  eye_slash     @map("eye-slash")
  clock
  computer
  calendar
  money_bag     @map("money-bag")

  @@map("icon_enum")
}

enum CostTypeEnum {
  fixed
  variable

  @@map("cost_type_enum")
}

/// Contains the default categories suggested to the user on the account creation
model DefaultCategory {
  name        String       @id @db.VarChar(30)
  description String       @db.VarChar(300)
  icon        IconEnum
  color       String       @db.Char(7)
  costType    CostTypeEnum @map("cost_type") ///This field is used only for populating the frontend and collecting data

  @@map("default_categories")
}

/// Contains all the user's categories
model Category {
  id          String   @id @db.Char(16)
  accountId   String   @map("account_id") @db.Char(16)
  name        String   @db.VarChar(30)
  description String   @db.VarChar(300)
  icon        IconEnum
  color       String   @db.Char(7)
  active      Boolean

  account               Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  budgetItems           BudgetItem[]
  transactions          Transaction[]
  recurrentTransactions RecurrentTransaction[]

  @@map("categories")
}

// **********************************
//
// Budgets
//
// **********************************

/// Contains the user's budget information
model Budget {
  id          String @id @db.Char(16)
  accountId   String @map("account_id") @db.Char(16)
  name        String @db.VarChar(30)
  description String @db.VarChar(300)

  account               Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  recurrentTransactions RecurrentTransaction[]
  config                Config?
  budgetDates           BudgetDate[]

  @@map("budgets")
}

/// Contains the budgets information by date (month-year)
model BudgetDate {
  id       String   @id @db.Char(16)
  budgetId String   @map("budget_id") @db.Char(16)
  month    Int      @db.SmallInt
  year     Int      @db.SmallInt
  date     DateTime @db.Date /// The first day of the month relative to the budgetDate

  budget       Budget        @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetItems  BudgetItem[]
  transactions Transaction[]

  @@unique([budgetId, month, year])
  @@map("budget_dates")
}

/// Contains the user's budgets by category, month and year
model BudgetItem {
  budgetDateId String @map("budget_date_id") @db.Char(16)
  categoryId   String @map("category_id") @db.Char(16)
  amount       Int /// Can only be POSITIVE

  budgetDate BudgetDate @relation(fields: [budgetDateId], references: [id], onDelete: Cascade)
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@id([budgetDateId, categoryId])
  @@map("budget_items")
}

// **********************************
//
// Transactions
//
// **********************************

enum TransactionTypeEnum {
  IN /// Add money to bank account
  OUT /// Subtract from bank account immediately
  CREDIT /// Like OUT, but subtract from bank account only after bill is paid
  TRANSFER /// Removes money from an account and adds to another

  @@map("transaction_type_enum")
}

/// Contains all the user's transactions
model Transaction {
  id                     String              @id @db.Char(16)
  accountId              String              @map("account_id") @db.Char(16)
  type                   TransactionTypeEnum
  name                   String              @db.VarChar(30)
  description            String              @db.VarChar(300)
  amount                 Int /// Can only be POSITIVE, the real amount is determined by the type OUT/CREDIT, then amount * -1
  budgetDateId           String              @map("budget_date_id") @db.Char(16)
  createdAt              DateTime            @default(now()) @map("created_at")
  isSystemManaged        Boolean             @map("is_system_managed") /// Define if the transaction is automatic controlled by the system, or if it\'s created and controled by the user
  recurrentTransactionId String?             @map("recurrent_transaction_id") @db.Char(16)
  // Transaction type=IN,OUT,CREDIT
  categoryId             String?             @map("category_id") @db.Char(16) /// Only type=IN,OUT,CREDIT transactions have this column
  // Transaction type=IN,OUT
  bankAccountId          String?             @map("bank_account_id") @db.Char(16) /// Only type=IN,OUT,CREDIT transactions have this column
  // Transaction type=CREDIT
  cardId                 String?             @map("card_id") @db.Char(16) /// Only type=IN,OUT,CREDIT transactions have this column
  // Transaction type=TRANSFER
  bankAccountFromId      String?             @map("bank_account_from_id") @db.Char(16) /// Only type=TRANSFER transactions have this column
  bankAccountToId        String?             @map("bank_account_to_id") @db.Char(16) /// Only type=TRANSFER transactions have this column

  account         Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  budgetDate      BudgetDate?  @relation(fields: [budgetDateId], references: [id])
  // Transaction type=IN,OUT,CREDIT
  category        Category?    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  // Transaction type=IN,OUT
  bankAccount     BankAccount? @relation(name: "TransactionBankAccount", fields: [bankAccountId], references: [id], onDelete: Restrict)
  // Transaction type=CREDIT
  card            Card?        @relation(fields: [cardId], references: [id], onDelete: Restrict)
  cardBill        CardBill?
  installment     Installment?
  // Transaction type=TRANSFER
  bankAccountFrom BankAccount? @relation(name: "TransactionBankAccountFrom", fields: [bankAccountFromId], references: [id], onDelete: Restrict)
  bankAccountTo   BankAccount? @relation(name: "TransactionBankAccountTo", fields: [bankAccountToId], references: [id], onDelete: Restrict)

  @@map("transactions")
}

/// Contains the installment data of an transactions
model Installment {
  transactionId      String  @id @map("transaction_id") @db.Char(16)
  installmentGroupId String  @map("installment_group_id") @db.Char(16) /// Group that the installment belongs, doesn't has an actual table because we don't need it
  total              Int     @db.SmallInt /// Total amount of installments
  current            Int     @db.SmallInt /// Number of the current installment
  cardBillId         String? @map("card_bill_id") @db.Char(16) /// The relationship is optional because a OUT transaction also can have installments (Ex: PIX Parcelado)

  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: Restrict)
  cardBill    CardBill?    @relation(fields: [cardBillId], references: [id], onDelete: Restrict)

  @@map("installments")
}

// **********************************
//
// Recurrent Transactions
//
// **********************************

enum RecurrenceFrequencyEnum {
  DAILY /// Every day
  MONTHLY /// Once a month
  YEARLY /// Once a year

  @@map("recurrence_frequency_enum")
}

enum RecurrenceFormulaEnum {
  RAW_AMOUNT /// amount * 1
  PM_1WG /// PreviousMonth_1WeekGap: amount * amountOfDaysThatMatchConditions
  PM_2WG /// PreviousMonth_2WeekGap: amount * amountOfDaysThatMatchConditions

  @@map("recurrence_formula_enum")
}

enum RecurrenceCreateEnum {
  DAY_1
  DAY_2
  DAY_3
  DAY_4
  DAY_5
  DAY_6
  DAY_7
  DAY_8
  DAY_9
  DAY_10
  DAY_11
  DAY_12
  DAY_13
  DAY_14
  DAY_15
  DAY_16
  DAY_17
  DAY_18
  DAY_19
  DAY_20
  DAY_21
  DAY_22
  DAY_23
  DAY_24
  DAY_25
  DAY_26
  DAY_27
  DAY_28
  DAY_29_OR_LAST_DAY_OF_MONTH
  DAY_30_OR_LAST_DAY_OF_MONTH
  DAY_31_OR_LAST_DAY_OF_MONTH

  FIFTH_BUSINESS_DAY

  FIRST_DAY_OF_MONTH
  LAST_DAY_OF_MONTH

  @@map("recurrence_create_enum")
}

enum RecurrenceExcludeEnum {
  IN_BUSINESS_DAY
  IN_WEEKEND

  IN_HOLIDAY
  NOT_IN_HOLIDAY

  @@map("recurrence_exclude_enum")
}

enum RecurrenceTryAgainEnum {
  IF_NOT_BEFORE
  IF_NOT_AFTER

  @@map("recurrence_try_again_enum")
}

/// Contains all the user's recurrent transactions.
/// The recurrent transactions are linked to the budget, this way the user can have a better control of which transactions he wants to execute.
model RecurrentTransaction {
  id                String                   @id @db.Char(16)
  accountId         String                   @map("account_id") @db.Char(16)
  budgetId          String                   @map("budget_id") @db.Char(16)
  isSystemManaged   Boolean                  @map("is_system_managed") /// Define if the recurrent transaction is automatic controlled by the system, or if it\'s created and controled by the user
  frequency         RecurrenceFrequencyEnum
  formulaToUse      RecurrenceFormulaEnum    @map("formula_to_use")
  startAt           DateTime?                @map("start_at")
  endAt             DateTime?                @map("end_at")
  baseAmounts       Int[]                    @map("base_amounts")
  cCreates          RecurrenceCreateEnum[]   @map("c_creates")
  cExcludes         RecurrenceExcludeEnum[]  @map("c_excludes")
  cTryAgains        RecurrenceTryAgainEnum[] @map("c_try_agains")
  createdAt         DateTime                 @default(now()) @map("created_at")
  // Data to create the transaction
  type              TransactionTypeEnum
  name              String                   @db.VarChar(30)
  description       String                   @db.VarChar(300)
  isSystemManagedT  Boolean                  @map("is_system_managed_t") /// Same as "isSystemManaged". It exists because some RecurrentTransactions may be system managed, but the Trasactions created by this RecurrentTransaction aren't. An example of it it's the salary, we have a specific interface for the user to managed it, and it shouldn't be managed directly by the user like other RecurrentTransactions, but the transactions created by it are normal Transactions, that the user can edit freely.
  // Transaction type=IN,OUT,CREDIT
  categoryId        String?                  @map("category_id") @db.Char(16) /// Only type=IN,OUT,CREDIT transactions have this column
  // Transaction type=CREDIT
  cardId            String?                  @map("card_id") @db.Char(16) /// Only type=IN,OUT,CREDIT transactions have this column
  // Transaction type=IN,OUT
  bankAccountId     String?                  @map("bank_account_id") @db.Char(16) /// Only type=IN,OUT,CREDIT transactions have this column
  // Transaction type=TRANSFER
  bankAccountFromId String?                  @map("bank_account_from_id") @db.Char(16) /// Only type=TRANSFER transactions have this column
  bankAccountToId   String?                  @map("bank_account_to_id") @db.Char(16) /// Only type=TRANSFER transactions have this column

  account                     Account                      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  budget                      Budget                       @relation(fields: [budgetId], references: [id], onDelete: Restrict)
  salaryRecurrentTransactions SalaryRecurrentTransaction[]
  // Transaction type=IN,OUT,CREDIT
  category                    Category?                    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  // Transaction type=CREDIT
  card                        Card?                        @relation(fields: [cardId], references: [id], onDelete: Restrict)
  // Transaction type=IN,OUT
  bankAccount                 BankAccount?                 @relation(name: "RecurrentTransactionBankAccount", fields: [bankAccountId], references: [id], onDelete: Restrict)
  // Transaction type=TRANSFER
  bankAccountFrom             BankAccount?                 @relation(name: "RecurrentTransactionBankAccountFrom", fields: [bankAccountFromId], references: [id], onDelete: Restrict)
  bankAccountTo               BankAccount?                 @relation(name: "RecurrentTransactionBankAccountTo", fields: [bankAccountToId], references: [id], onDelete: Restrict)

  @@map("recurrent_transactions")
}
